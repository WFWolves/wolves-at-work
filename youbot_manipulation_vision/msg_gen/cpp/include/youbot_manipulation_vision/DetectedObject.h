/* Auto-generated by genmsg_cpp for file /home/youbot/ros_workspace/youbot_manipulation_vision/msg/DetectedObject.msg */
#ifndef YOUBOT_MANIPULATION_VISION_MESSAGE_DETECTEDOBJECT_H
#define YOUBOT_MANIPULATION_VISION_MESSAGE_DETECTEDOBJECT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "youbot_manipulation_vision/RotatedRect.h"
#include "youbot_manipulation_vision/BoundingBox.h"

namespace youbot_manipulation_vision
{
template <class ContainerAllocator>
struct DetectedObject_ {
  typedef DetectedObject_<ContainerAllocator> Type;

  DetectedObject_()
  : object_name()
  , rrect()
  , bbox()
  {
  }

  DetectedObject_(const ContainerAllocator& _alloc)
  : object_name(_alloc)
  , rrect(_alloc)
  , bbox(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _object_name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  object_name;

  typedef  ::youbot_manipulation_vision::RotatedRect_<ContainerAllocator>  _rrect_type;
   ::youbot_manipulation_vision::RotatedRect_<ContainerAllocator>  rrect;

  typedef  ::youbot_manipulation_vision::BoundingBox_<ContainerAllocator>  _bbox_type;
   ::youbot_manipulation_vision::BoundingBox_<ContainerAllocator>  bbox;


  typedef boost::shared_ptr< ::youbot_manipulation_vision::DetectedObject_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::youbot_manipulation_vision::DetectedObject_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct DetectedObject
typedef  ::youbot_manipulation_vision::DetectedObject_<std::allocator<void> > DetectedObject;

typedef boost::shared_ptr< ::youbot_manipulation_vision::DetectedObject> DetectedObjectPtr;
typedef boost::shared_ptr< ::youbot_manipulation_vision::DetectedObject const> DetectedObjectConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::youbot_manipulation_vision::DetectedObject_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::youbot_manipulation_vision::DetectedObject_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace youbot_manipulation_vision

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::youbot_manipulation_vision::DetectedObject_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::youbot_manipulation_vision::DetectedObject_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::youbot_manipulation_vision::DetectedObject_<ContainerAllocator> > {
  static const char* value() 
  {
    return "800da33f4f6e00b51df454a5259cf97d";
  }

  static const char* value(const  ::youbot_manipulation_vision::DetectedObject_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x800da33f4f6e00b5ULL;
  static const uint64_t static_value2 = 0x1df454a5259cf97dULL;
};

template<class ContainerAllocator>
struct DataType< ::youbot_manipulation_vision::DetectedObject_<ContainerAllocator> > {
  static const char* value() 
  {
    return "youbot_manipulation_vision/DetectedObject";
  }

  static const char* value(const  ::youbot_manipulation_vision::DetectedObject_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::youbot_manipulation_vision::DetectedObject_<ContainerAllocator> > {
  static const char* value() 
  {
    return "#Name of the detected Object\n\
string object_name\n\
\n\
#Rotated Rectangle of the source image matching the detected object\n\
RotatedRect rrect\n\
BoundingBox bbox\n\
================================================================================\n\
MSG: youbot_manipulation_vision/RotatedRect\n\
#Center of the rotated rectangle\n\
geometry_msgs/Point centerPoint\n\
\n\
#The width of the rotated rectangle\n\
float64 width\n\
#The height of the rotated rectangle\n\
float64 height\n\
\n\
#The angle of the rotated rectangle\n\
float64 angle\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: youbot_manipulation_vision/BoundingBox\n\
#Top-left corner of the bounding box\n\
geometry_msgs/Point position\n\
\n\
#The width of the bounding box\n\
float64 width\n\
#The height of the bounding box\n\
float64 height\n\
";
  }

  static const char* value(const  ::youbot_manipulation_vision::DetectedObject_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::youbot_manipulation_vision::DetectedObject_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.object_name);
    stream.next(m.rrect);
    stream.next(m.bbox);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct DetectedObject_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::youbot_manipulation_vision::DetectedObject_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::youbot_manipulation_vision::DetectedObject_<ContainerAllocator> & v) 
  {
    s << indent << "object_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.object_name);
    s << indent << "rrect: ";
s << std::endl;
    Printer< ::youbot_manipulation_vision::RotatedRect_<ContainerAllocator> >::stream(s, indent + "  ", v.rrect);
    s << indent << "bbox: ";
s << std::endl;
    Printer< ::youbot_manipulation_vision::BoundingBox_<ContainerAllocator> >::stream(s, indent + "  ", v.bbox);
  }
};


} // namespace message_operations
} // namespace ros

#endif // YOUBOT_MANIPULATION_VISION_MESSAGE_DETECTEDOBJECT_H

